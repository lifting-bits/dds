#prologue ```python
from capstone import CsInsn
```
;---------------------------------------------------------
; Foreign Types
;---------------------------------------------------------
#foreign sectype ```python int```
#constant sectype SECTION_EXEC ```python 0```
#constant sectype SECTION_DATA ```python 1```

#foreign insntype ```python int```
#constant insntype INSN_NORMAL             ```python 0```
#constant insntype INSN_DIRECT_JUMP        ```python 1```
#constant insntype INSN_INDIRECT_JUMP      ```python 2```
#constant insntype INSN_COND_DIRECT_JUMP   ```python 3```
#constant insntype INSN_COND_INDIRECT_JUMP ```python 4```
#constant insntype INSN_DIRECT_CALL        ```python 5```
#constant insntype INSN_INDIRECT_CALL      ```python 6```
#constant insntype INSN_RETURN             ```python 7```
#constant insntype INSN_NOP                ```python 8```

#foreign edgetype ```python int```
#constant edgetype EDGE_FALLTHRU           ```python 0```
#constant edgetype EDGE_JUMP_TARG          ```python 1```
#constant edgetype EDGE_COND_TRUE          ```python 2```
#constant edgetype EDGE_COND_FALSE         ```python 3```
#constant edgetype EDGE_CALL_TARG          ```python 4```
#constant edgetype EDGE_CALL_RET           ```python 5```

;---------------------------------------------------------
; Sections
;---------------------------------------------------------
#message section(bytes SecName, u64 SecStart, u64 SecEnd, sectype SecType)

#query get_sections(free bytes SecName)

get_sections(SecName) 
  : section(SecName, _, _, _).

;---------------------------------------------------------
; Instructions
;---------------------------------------------------------
#message instruction(u64 InsnEA, insntype InsnType, bytes InsnBytes, bytes SecName)
#message instruction_transfer(u64 InsnEA, u64 NextEA, edgetype EdgeType)

#query get_instructions(free u64 InsnEA)
#query get_section_instructions(bound bytes SecName, free u64 InsnEA)
#query get_function_instructions(bound u64 FuncEA, free u64 InsnEA)

; All instructions
get_instructions(InsnEA) 
  : instruction(InsnEA, _, _, _).

; Instructions for a particular section
get_section_instructions(SecName, InsnEA)
  : section(SecName, _, _, _)
  , instruction(InsnEA, _, _, SecName).

; Function heads from section entrypoints
get_function_instructions(FuncEA, FuncEA)
  : instruction(FuncEA, _, _, _)
  , section(_, FuncEA, _, 1).

; Function heads from call targets (excluding PC thunks)
get_function_instructions(FuncEA, FuncEA)
  : instruction(CallEA, INSN_DIRECT_CALL, _, _)
  , instruction_transfer(CallEA, FuncEA, EDGE_CALL_TARG)
  , instruction(NextEA, _, _, _)
  , instruction_transfer(CallEA, NextEA, EDGE_CALL_RET)
  , NextEA != FuncEA.

; Function body instructions (intraprocedural sequences)
get_function_instructions(FuncEA, NextEA)
  : get_function_instructions(FuncEA, InsnEA)
  , instruction_transfer(InsnEA, NextEA, EDGE_FALLTHRU). 
get_function_instructions(FuncEA, NextEA)
  : get_function_instructions(FuncEA, InsnEA)
  , instruction_transfer(InsnEA, NextEA, EDGE_COND_TRUE).
get_function_instructions(FuncEA, NextEA)
  : get_function_instructions(FuncEA, InsnEA)
  , instruction_transfer(InsnEA, NextEA, EDGE_COND_FALSE).
get_function_instructions(FuncEA, NextEA)
  : get_function_instructions(FuncEA, InsnEA)
  , instruction_transfer(InsnEA, NextEA, EDGE_CALL_RET).

;---------------------------------------------------------
; Functions
;---------------------------------------------------------
#query get_functions(free u64 FuncEA)

; All function heads
get_functions(FuncEA)
  : get_function_instructions(FuncEA, FuncEA).

;get_functions_tailcalled(FuncEA)
;  : get_function_instructions(FuncEA, Insn),
;  , instruction_transfer(Insn, FuncEA, )


