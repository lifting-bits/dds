;---------------------------------------------------------
; Types for sections, instructions, and control-flow transfers
#foreign sectype ```python int```
#constant sectype SECTION_EXEC ```python 0```
#constant sectype SECTION_DATA ```python 1```

#foreign insntype ```python int```
#constant insntype INSN_NORMAL             ```python 0```
#constant insntype INSN_DIRECT_JUMP        ```python 1```
#constant insntype INSN_INDIRECT_JUMP      ```python 2```
#constant insntype INSN_COND_DIRECT_JUMP   ```python 3```
#constant insntype INSN_COND_INDIRECT_JUMP ```python 4```
#constant insntype INSN_DIRECT_CALL        ```python 5```
#constant insntype INSN_INDIRECT_CALL      ```python 6```
#constant insntype INSN_RETURN             ```python 7```
#constant insntype INSN_HALT               ```python 8```
#constant insntype INSN_NOP                ```python 9```

#foreign edgetype ```python int```
#constant edgetype EDGE_FALLTHRU    ```python 0```
#constant edgetype EDGE_JUMP_TARG   ```python 1```
#constant edgetype EDGE_JUMP_PSEUDO ```python 2``` ; post-jump fallthrough
#constant edgetype EDGE_COND_TRUE   ```python 3```
#constant edgetype EDGE_COND_FALSE  ```python 4```
#constant edgetype EDGE_CALL_TARG   ```python 5```
#constant edgetype EDGE_CALL_PSEUDO ```python 6``` ; post-call fallthrough

;---------------------------------------------------------
; External symbol (could be code or data).
#message external_symbol(u64 ExternEA, bytes ExternName)

;---------------------------------------------------------
; Entrypoint of the binary.
#message entrypoint(u64 EntryPointEA)

;---------------------------------------------------------
; Function objects. Derived from known call targets or 
; executable section (.init, .fini, .text) entries. 
#query function(bound u64 FuncEA)
; Return all function heads.
#query function(free u64 FuncEA)
; Return all instructions for a given function head; i.e.,
; all instructions connected by intraprocedural transfers.
#query function_instruction(bound u64 FuncEA, free u64 InsnEA)

;---------------------------------------------------------
; Section objects.
#message section(bytes SecName, u64 SecStart, u64 SecEnd, sectype SecType)
; Return all section names.
#query get_sections(free bytes SecName)
; Return all instructions for a given section name.
#query get_section_instructions(bound bytes SecName, free u64 InsnEA)

;---------------------------------------------------------
; Instruction objects.
#message instruction(u64 InsnEA, insntype Type, bytes Bytes, bytes SecName)
; Return all instructions.
#query get_instructions(free u64 InsnEA)
; A plausible instruction address.
#export plausible_instruction(EA)

;---------------------------------------------------------
; Operand objects.
#message address_operand(u64 InsnEA, u64 MemAddr)

;---------------------------------------------------------
; Relocation objects.
#message relocation(u64 RelocEA, u64 ExternEA)

;---------------------------------------------------------
; Constructor and destructor function objects.
#message constructor_function(u64 FuncEA)
#message destructor_function(u64 FuncEA)

;---------------------------------------------------------
; Transfer objects
#message raw_transfer(u64 InsnEA, u64 NextEA, edgetype EdgeType)
; An adjusted transfer, e.g. that distinguishes between PC-thunk calls and
; non-PC thunk calls.
#export transfer(u64 InsnEA, u64 NextEA, edgetype EdgeType)
; Interprocedural transfers, minus inlined thunk calls.
#query interproc_transfer(bound u64 CallEA, free u64 FuncEA)
; Intraprocedural transfers.
#query intraproc_transfer(bound u64 FuncEA, free u64 InsnEA)
; Return all calls to external (relocated) addresses.
#query get_external_calls(free u64 CallEA)
; Return all tail calls (jumps to function starts).
#query get_tail_calls(free u64 CallEA)
