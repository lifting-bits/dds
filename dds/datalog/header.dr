;---------------------------------------------------------
; Types for instructions, and control-flow transfers

#prologue ```python
from dds.arch import ControlFlowEdgeKind, InstructionType
```

#foreign insntype ```python InstructionType```
#constant insntype INSN_NORMAL             ```python InstructionType.NORMAL```
#constant insntype INSN_DIRECT_JUMP        ```python InstructionType.DIRECT_JUMP```
#constant insntype INSN_INDIRECT_JUMP      ```python InstructionType.INDIRECT_JUMP```
#constant insntype INSN_COND_DIRECT_JUMP   ```python InstructionType.CONDITIONAL_DIRECT_JUMP```
#constant insntype INSN_COND_INDIRECT_JUMP ```python InstructionType.CONDITIONAL_INDIRECT_JUMP```
#constant insntype INSN_DIRECT_CALL        ```python InstructionType.DIRECT_FUNCTION_CALL```
#constant insntype INSN_COND_DIRECT_CALL   ```python InstructionType.CONDITIONAL_DIRECT_FUNCTION_CALL```
#constant insntype INSN_INDIRECT_CALL      ```python InstructionType.INDIRECT_FUNCTION_CALL```
#constant insntype INSN_COND_INDIRECT_CALL ```python InstructionType.CONDITIONAL_INDIRECT_FUNCTION_CALL```
#constant insntype INSN_RETURN             ```python InstructionType.FUNCTION_RETURN```
#constant insntype INSN_COND_RETURN        ```python InstructionType.CONDITIONAL_FUNCTION_RETURN```
#constant insntype INSN_HALT               ```python InstructionType.ERROR```

#foreign edgetype ```python ControlFlowEdgeKind```
#constant edgetype EDGE_FALL_THROUGH            ```python ControlFlowEdgeKind.FALL_THROUGH```
#constant edgetype EDGE_PSEUDO_FALL_THROUGH     ```python ControlFlowEdgeKind.PSEUDO_FALL_THROUGH```
#constant edgetype EDGE_JUMP_TAKEN              ```python ControlFlowEdgeKind.JUMP_TAKEN```
#constant edgetype EDGE_JUMP_NOT_TAKEN          ```python ControlFlowEdgeKind.EDGE_JUMP_NOT_TAKEN```
#constant edgetype EDGE_FUNCTION_CALL           ```python ControlFlowEdgeKind.FUNCTION_CALL```
#constant edgetype EDGE_FUNCTION_CALL_RETURN    ```python ControlFlowEdgeKind.FUNCTION_CALL_RETURN```
#constant edgetype EDGE_TAIL_FUNCTION_CALL      ```python ControlFlowEdgeKind.TAIL_FUNCTION_CALL```
#constant edgetype EDGE_PC_THUNK_FUNCTION_CALL  ```python ControlFlowEdgeKind.PC_THUNK_FUNCTION_CALL```


;---------------------------------------------------------
; External symbol (could be code or data).
#message external_symbol(u64 ExternEA, bytes ExternName)

;---------------------------------------------------------
; Entrypoint of the binary.
#message entrypoint(u64 EntryPointEA)

;---------------------------------------------------------
; Function objects. Derived from known call targets or 
; executable section (.init, .fini, .text) entries. 
#query function(bound u64 FuncEA)
; Return all function heads.
#query function(free u64 FuncEA)
; Return all instructions for a given function head; i.e.,
; all instructions connected by intraprocedural transfers.
#query function_instruction(bound u64 FuncEA, free u64 InsnEA)

;---------------------------------------------------------
; Section objects.
#message section(bytes SecName, u64 SecStart, u64 SecEnd)
; Return all section names.
#query get_section_names(free bytes SecName)
; Return the section at 
#query section_start(free u64 SecStart)

;---------------------------------------------------------
; Instruction objects.
#message instruction(u64 InsnEA, insntype Type, bytes Bytes)
; Return all instructions.
#query get_instructions(free u64 InsnEA)
; A plausible instruction address.
#export plausible_instruction(EA)

;---------------------------------------------------------
; Operand objects.
#message address_operand(u64 InsnEA, u64 MemAddr)

;---------------------------------------------------------
; Relocation objects.
#message relocation(u64 RelocEA, u64 ExternEA)

;---------------------------------------------------------
; Function objects (constructors, destructors, imported, 
; exported, and local functions).
#message constructor_function(u64 FuncEA)
#message destructor_function(u64 FuncEA)
#message imported_function(u64 FuncEA, bytes Name)
#message exported_function(u64 FuncEA, bytes Name)
#message local_function(u64 FuncEA, bytes Name)

;---------------------------------------------------------
; Symbol objects (imported, exported, and local).
#message imported_symbol(u64 SymEA, bytes SymName)
#message exported_symbol(u64 SymEA, bytes SymName)
#message local_symbol(u64 SymEA, bytes SymName)

;---------------------------------------------------------
; Transfer objects.
#message raw_transfer(u64 InsnEA, u64 NextEA, edgetype EdgeType)
; An adjusted transfer, e.g. that distinguishes between PC-
; thunk calls and non-PC thunk calls.
#export transfer(u64 InsnEA, u64 NextEA, edgetype EdgeType)
; Interprocedural transfers, minus inlined thunk calls.
#query interproc_transfer(bound u64 CallEA, free u64 FuncEA)
; Intraprocedural transfers.
#query intraproc_transfer(bound u64 FuncEA, free u64 InsnEA)
; Return all calls to external (relocated) addresses.
#query get_external_calls(free u64 CallEA)
; Return all tail calls (jumps to function starts).
#query get_tail_calls(free u64 CallEA)
