; Copyright 2021, Trail of Bits. All rights reserved.

#import "header.dr"

; An indirect jump through a relocation. For example:
;
;   .plt:0000000000000530 ; int printf(const char *format, ...)
;   .plt:0000000000000530 _printf         proc near
;   .plt:0000000000000530                 jmp     cs:off_201018
;   .plt:0000000000000530 _printf         endp
;
; With `off_201018` having:
;
;   .got.plt:0000000000201018 off_201018        dq offset printf
;
; Where the reference to `printf` in `off_201018` is enacted by a relocation.
; Here, we want to rewrite the indirect jump to go straight to the external
; address of `printf`.

#local indirect_jump_to_external(JmpEA, ExternEA)
#local indirect_call_to_external(JmpEA, ExternEA)

indirect_jump_to_external(JmpEA, ExternEA)
    : instruction(JmpEA, INSN_INDIRECT_JUMP, _)
    , address_operand(JmpEA, AddrOfTargetEA)
    , relocation(AddrOfTargetEA, ExternEA)
    , plausible_instruction(ExternEA)
    , !dominates_invalid_instruction(ExternEA).

; An indirect, conditional jump through a relocation.
; Similar case to above.
indirect_jump_to_external(JmpEA, ExternEA)
    : instruction(JmpEA, INSN_COND_INDIRECT_JUMP, _)
    , address_operand(JmpEA, AddrOfTargetEA)
    , relocation(AddrOfTargetEA, ExternEA)
    , plausible_instruction(ExternEA)
    , !dominates_invalid_instruction(ExternEA).

; An indirect call through a relocation. Similar case to above.
indirect_call_to_external(CallEA, ExternEA)
    : instruction(CallEA, INSN_INDIRECT_CALL, _)
    , address_operand(CallEA, AddrOfTargetEA)
    , relocation(AddrOfTargetEA, ExternEA)
    , plausible_instruction(ExternEA)
    , !dominates_invalid_instruction(ExternEA).

; An indirect, conditional call through a relocation.
; Similar case to above.
indirect_call_to_external(CallEA, ExternEA)
    : instruction(CallEA, INSN_COND_INDIRECT_CALL, _)
    , address_operand(CallEA, AddrOfTargetEA)
    , relocation(AddrOfTargetEA, ExternEA)
    , plausible_instruction(ExternEA)
    , !dominates_invalid_instruction(ExternEA).

;---------------------------------------------------------
; Fixed transfers. Here, "fixing" our raw_transfers refers
; to (1) re-routing relocations to their respective external
; addresses; and (2) pruning CALL's whose targets shouldn't
; be considered function heads (i.e., inline PC thunk calls).
#local fixed_transfer(FromEA, ToEA, EdgeType)
fixed_transfer(JmpEA, ExternEA, EDGE_JUMP_TAKEN)
    : indirect_jump_to_external(JmpEA, ExternEA).

fixed_transfer(CallEA, ExternEA, EDGE_FUNCTION_CALL)
    : indirect_call_to_external(CallEA, ExternEA).

; If the target and the fall-through are the same instruction, then
; this is usually a kind of "inline PC thunk" pattern, e.g.
;
;   call $+5
;   pop ebx
;
; On x86, `ebx` will contain the address of `pop ebx` after executing
; these two instructions. In practice, we don't want to consider
; `pop ebx` to be the head of a function.
fixed_transfer(CallEA, TargEA, EDGE_PC_THUNK_FUNCTION_CALL)
    : raw_transfer(CallEA, TargEA, EDGE_FUNCTION_CALL)
    , raw_transfer(CallEA, TargEA, EDGE_FUNCTION_CALL_RETURN)
    , plausible_instruction(TargEA)
    , !dominates_invalid_instruction(TargEA).

; Target of a function call.
fixed_transfer(CallEA, TargEA, EDGE_FUNCTION_CALL)
    : raw_transfer(CallEA, TargEA, EDGE_FUNCTION_CALL)
    , raw_transfer(CallEA, FallEA, EDGE_FUNCTION_CALL_RETURN)
    , TargEA != FallEA
    , plausible_instruction(TargEA)
    , !dominates_invalid_instruction(TargEA).

; Fall-through of a function call.
;
; TODO(pag): Add support for no-return functions.
fixed_transfer(CallEA, FallEA, EDGE_FUNCTION_CALL_RETURN)
    : raw_transfer(CallEA, TargEA, EDGE_FUNCTION_CALL)
    , raw_transfer(CallEA, FallEA, EDGE_FUNCTION_CALL_RETURN)
    , TargEA != FallEA
    , plausible_instruction(FallEA)
    , !dominates_invalid_instruction(FallEA).

; Transfer that isn't related to a call.
fixed_transfer(FromEA, ToEA, EdgeType)
    : raw_transfer(FromEA, ToEA, EdgeType)
    , plausible_instruction(ToEA)
    , EdgeType != EDGE_FUNCTION_CALL
    , EdgeType != EDGE_FUNCTION_CALL_RETURN
    , !dominates_invalid_instruction(ToEA).

;---------------------------------------------------------
; An explicit control-flow target is one that is the target
; of a `jmp`, a `call`, but not a fall-through or pseudo-
; fall through.

#local explicit_control_flow_target(EA)

explicit_control_flow_target(EA)
    : function(EA).

explicit_control_flow_target(EA)
    : fixed_transfer(_, EA, EdgeType)
    , EdgeType != EDGE_FALL_THROUGH
    , EdgeType != EDGE_PSEUDO_FALL_THROUGH.

;---------------------------------------------------------
; A basic block is a sequence of one or more instructions that
; executes in a straight line, without control-flow from
; elsewhere jumping into the middle of it.
#local basic_block(BlockEA, InsnEA)

basic_block(InsnEA, InsnEA)
    : explicit_control_flow_target(InsnEA).

basic_block(BlockEA, NextInsnEA)
    : basic_block(BlockEA, InsnEA)
    , fixed_transfer(InsnEA, NextInsnEA, EDGE_FALL_THROUGH)
    , !explicit_control_flow_target(NextInsnEA).

;---------------------------------------------------------
; Next we try to identify inter- and intra-function padding. Below
; is an example that includes both:
;
;      __do_global_dtors_aux proc near
;                      cmp     cs:__bss_start, 0
;                      jnz     short locret_4004B0
;                      push    rbp
;                      mov     rbp, rsp
;                      call    deregister_tm_clones
;                      mov     cs:__bss_start, 1
;                      pop     rbp
;                      retn
;                      align 10h           ;; intra-function padding
;      locret_4004B0:
;                      rep retn
;      __do_global_dtors_aux endp
;                      align 20h           ;; inter-function padding
;      frame_dummy     proc near
;
; In the above code, we have both inter- and intra-function padding.
; In both cases, the padding follows a `retn` instruction. In the
; first case, the padding precedes `locret_4004B0`, i.e. the head of
; a basic block, targeted by `jnz     short locret_4004B0`. In the
; second case, the padding separates the two functions.
;
; We detect the second case via a backward pass: starting at the
; beginning of a function, beginning of a section, or ending of a
; section, work backward, finding possible padding.
;
; We are more restricted/speculative in how we detect the first case,
; intra-function padding. In general, if we miss jump tables then an
; overly aggressive approach could really throw things off.

#local inter_function_padding(EA)

; Base case for inter-function padding:
;
; An instruction that falls through to the beginning of a function,
; the beginning of a section, or the ending of a section, and that
; doesn't itself belong to any known basic blocks is treated as
; padding.
inter_function_padding(InsnEA)
    : fixed_transfer(InsnEA, FuncEA, EDGE_FALL_THROUGH)
    , function(FuncEA)
    , !basic_block(_, InsnEA).

inter_function_padding(InsnEA)
    : fixed_transfer(InsnEA, SecStartEA, EDGE_FALL_THROUGH)
    , section_start(SecStartEA)
    , !basic_block(_, InsnEA).

inter_function_padding(InsnEA)
    : fixed_transfer(InsnEA, SecEndEA, EDGE_FALL_THROUGH)
    , section_end(SecEndEA)
    , !basic_block(_, InsnEA).

; Inductive case for inter-function padding:
;
; An instruction that falls through to function padding, where that
; instruction isn't part of any basic blocks, is also considered
; to be padding.
inter_function_padding(InsnEA)
    : fixed_transfer(InsnEA, PaddingEA, EDGE_FALL_THROUGH)
    , inter_function_padding(PaddingEA)
    , !basic_block(_, InsnEA).

;---------------------------------------------------------

; Only keep pseudo fall-throughs that...
;   1) Don't transfer to function heads.
;   2) Don't transfer to function padding (i.e., sequences of
;      instructions directly following one function that fall-
;      through to the next function).
;   3) Transfers to actual instructions (rather than plausible
;      ones, which include external addresses).
;   4) The subsequent instruction doesn't lead ot invalid
;      instructions (implied by using `fixed_transfer`).
;   5) The subsequent instruction isn't at the beginning of
;      a new section.
;   6) The subsequence instruction is not an error instruction.
;   7) The instruction isn't an indirect jump to an external,
;      which often lives in something like the `.plt` section
;      of an ELF.
transfer(FromEA, NextEA, EDGE_PSEUDO_FALL_THROUGH)
    : fixed_transfer(FromEA, NextEA, EDGE_PSEUDO_FALL_THROUGH)
    , !indirect_jump_to_external(FromEA, _)
    , !function(NextEA)
    , !section_start(NextEA)
    , !section_end(NextEA)
    , !inter_function_padding(NextEA)
    , instruction(NextEA, NextInsnType, _)
    , NextInsnType != INSN_HALT.

; Here we have an edge that isn't a jump or pseudo fall-through,
; so we pass it through.
transfer(FromEA, ToEA, EdgeType)
    : fixed_transfer(FromEA, ToEA, EdgeType)
    , EdgeType != EDGE_JUMP_TAKEN
    , EdgeType != EDGE_PSEUDO_FALL_THROUGH.

; Here we have an edge that is a jump, and the target of
; the jump is a function head, and so we want to change its
; interpretation to be a tail-call.
transfer(FromEA, ToEA, EDGE_TAIL_FUNCTION_CALL)
    : fixed_transfer(FromEA, ToEA, EDGE_JUMP_TAKEN)
    , function(ToEA).

; Here we have an edge that is a jump, and the target of
; the jump is a function head, and so we want to change its
; interpretation to be a tail-call.
transfer(FromEA, ToEA, EDGE_JUMP_TAKEN)
    : fixed_transfer(FromEA, ToEA, EDGE_JUMP_TAKEN)
    , !function(ToEA).

;---------------------------------------------------------
; Interprocedural transfers, minus inlined thunk calls.
intraproc_transfer(FromEA, ToEA)
    : transfer(FromEA, ToEA, _)
    , !function(ToEA).

; Intraprocedural transfers.
interproc_transfer(FromEA, ToEA)
    : transfer(FromEA, ToEA, _)
    , function(ToEA).
