; Copyright 2021, Trail of Bits. All rights reserved.

#import "header.dr".

;---------------------------------------------------------
; Treat inter-procedrual transfer targets as function heads.
function(FuncEA)
    : transfer(_, FuncEA, EDGE_FUNCTION_CALL)
    , function_call_targets_are_function_heads.

; Treat the binary's entrypoint as a function head.
function(EntryPointEA)
    : entrypoint(EntryPointEA)
    , plausible_instruction(EntryPointEA).

; Mark imported, exported, and local functions as function heads.
function(EA)
    : imported_function(EA, _)
    , instruction(EA, _, _)

    : exported_function(EA, _)
    , instruction(EA, _, _)

    : local_function(EA, _)
    , instruction(EA, _, _)
    , trust_binary_parser_function_heads.

; Mark imported, exported, and local symbols targeted by calls as 
; function heads.
function(EA)
    : imported_symbol(EA, _)
    , instruction(EA, _, _)

    : exported_symbol(EA, _)
    , instruction(EA, _, _)

    : local_symbol(EA, _)
    , instruction(EA, _, _).

; Any type of control-flow transfer to an external is treated
; as a making that external into a function.
function(FuncEA)
    : external_symbol(FuncEA, _)
    , raw_transfer(_, FuncEA, _).

; An indirect jump that has been re-written to have a known
; target, and where that target is a function, is also treated
; to be a function. In this case, we say that the indirect jump
; is likely the thunk in the `.plt` section of an ELF binary.
function(JmpEA)
    : instruction(JmpEA, INSN_INDIRECT_JUMP, _)
    , transfer(JmpEA, ToEA, EDGE_JUMP_TAKEN)
    , function(ToEA).

;---------------------------------------------------------
; The first instruction of a function is always a member of
; that function. In this case, we require that the instruction
; be associated with a decoded instruction, otherwise it is
; an external function.
function_instruction(FuncEA, FuncEA)
    : function(FuncEA)
    , instruction(FuncEA, _, _).

; If there's a flow between two instructions in a
; function then the destination instruction of that flow is
; also a part of the function.
function_instruction(FuncEA, NextEA)
    : function_instruction(FuncEA, InsnEA)
    , intraproc_transfer(InsnEA, NextEA).
