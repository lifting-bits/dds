#import "header.dr"

;---------------------------------------------------------
; If we have an inter-procedural transfer.
function(FuncEA)
  : transfer(_, FuncEA, EDGE_FUNCTION_CALL).

; Any type of control-flow transfer to an external is treated ;
; as a making that external into a function.
function(FuncEA)
  : external_symbol(FuncEA, _)
  , raw_transfer(_, FuncEA, _).

; The binary entrypoint is treated as a function.
function(EntryPointEA)
  : entrypoint(EntryPointEA)
  , plausible_instruction(EntryPointEA).

; An indirect jump that has been re-written to have a known
; target, and where that target is a function, is also treated
; to be a function. In this case, we say that the indirect jump
; is likely the thunk in the `.plt` section of an ELF binary.
function(JmpEA)
  : instruction(JmpEA, INSN_INDIRECT_JUMP, _)
  , transfer(JmpEA, ToEA, EDGE_JUMP_TAKEN)
  , function(ToEA).

; Mark all constructor functions.
function(FuncEA)
  : constructor_function(FuncEA)
  , instruction(FuncEA, _, _).

; Mark all destructor functions.
function(FuncEA)
  : destructor_function(FuncEA)
  , instruction(FuncEA, _, _).

;---------------------------------------------------------
; If an instruction begins a function, it is part of it.
function_instruction(FuncEA, FuncEA)
  : function(FuncEA).

; A function's intraproc-connected instructions are part of it.
function_instruction(FuncEA, NextEA)
  : function_instruction(FuncEA, InsnEA)
  , intraproc_transfer(InsnEA, NextEA).

  