#message add_edge(i64 From, i64 To)
#message remove_edge(i64 From, i64 To)


#epilogue ```python

import lief
import os
import re
import subprocess
import sys
from capstone import *
from binascii import unhexlify

md = Cs(CS_ARCH_X86, CS_MODE_64)
md.detail = True
md.syntax = CS_OPT_SYNTAX_ATT

usage = '''Usage: 
		\tpython3 %s [target_binary] [disassembler]
		\tSupported disassemblers:
		\t  objdump
		\t  llvm-objdump
		\t  lief
		''' % sys.argv[0]

# Disassemble with objdump/llvm-objdump

def disas_objdump(targ, mode):
	disas = subprocess.check_output([mode, '-D', targ]).decode('utf-8').rstrip()
	
	re_text = r"(?s)(?=(?:Dis.*?(?:text)(?:.*?):\n)(.*?)(?:Dis))"
	re_insn = re.compile(r"([0-9a-fA-F]*)(?::[\t| ])([0-9a-fA-F{2} ]*\b)")
	
	text = re.search(re_text, disas, re.MULTILINE).group(1)

	for entry in re.findall(re_insn, text):
		(addr, code) = entry
		cs_addr = int(addr,16)
		cs_code = unhexlify(code.replace(' ',''))

		# One-by-one decoding

		try: 
			i = next(md.disasm(cs_code, cs_addr)) 
		except: 
			continue

		print("0x%x:\t%s\t%s" % (i.address, i.mnemonic, i.op_str))
	
	return

# Disassemble with lief

def disas_lief(targ, mode):
	parsed = lief.parse(targ)
	text = parsed.get_section(".text")

	cs_addr = int('0x400000',16)
	cs_code = bytearray(text.content)

	# Full-bytearray decoding

	insns = md.disasm(cs_code, text.virtual_address)

	for i in insns:
		print("0x%x:\t%s\t%s" % (i.address, i.mnemonic, i.op_str))

	return

# Main function

if __name__ == "__main__":
	functors = DatabaseFunctors()
	log = DatabaseLog()
	db = Database(log, functors)

	# Get and check args

	if len(sys.argv) != 3:
		print("ERROR: Missing argument(s)!")
		print(usage)
		exit(0)

	targ = sys.argv[1]
	if not os.path.exists(targ):
		print("ERROR: Can't find target binary (%s)!" % targ)
		print(usage)
		exit(0)	

	mode = sys.argv[2]
	if mode not in ['objdump', 'llvm-objdump', 'lief']:
		print("ERROR: Unsupported disassembler (%s)!" % mode)
		print(usage)
		exit(0)			

	# Disassemble and decode!

	if "objdump" in mode:
		disas_objdump(targ, mode)
	if "lief" in mode:
		disas_lief(targ, mode)

```